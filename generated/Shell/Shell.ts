// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AssetIncluded extends ethereum.Event {
  get params(): AssetIncluded__Params {
    return new AssetIncluded__Params(this);
  }
}

export class AssetIncluded__Params {
  _event: AssetIncluded;

  constructor(event: AssetIncluded) {
    this._event = event;
  }

  get numeraire(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reserve(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get weight(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AssimilatorIncluded extends ethereum.Event {
  get params(): AssimilatorIncluded__Params {
    return new AssimilatorIncluded__Params(this);
  }
}

export class AssimilatorIncluded__Params {
  _event: AssimilatorIncluded;

  constructor(event: AssimilatorIncluded) {
    this._event = event;
  }

  get derivative(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get numeraire(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get reserve(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assimilator(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class FrozenSet extends ethereum.Event {
  get params(): FrozenSet__Params {
    return new FrozenSet__Params(this);
  }
}

export class FrozenSet__Params {
  _event: FrozenSet;

  constructor(event: FrozenSet) {
    this._event = event;
  }

  get isFrozen(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class OwnershipTransfered extends ethereum.Event {
  get params(): OwnershipTransfered__Params {
    return new OwnershipTransfered__Params(this);
  }
}

export class OwnershipTransfered__Params {
  _event: OwnershipTransfered;

  constructor(event: OwnershipTransfered) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ParametersSet extends ethereum.Event {
  get params(): ParametersSet__Params {
    return new ParametersSet__Params(this);
  }
}

export class ParametersSet__Params {
  _event: ParametersSet;

  constructor(event: ParametersSet) {
    this._event = event;
  }

  get alpha(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get beta(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get delta(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get epsilon(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get lambda(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PartitionRedeemed extends ethereum.Event {
  get params(): PartitionRedeemed__Params {
    return new PartitionRedeemed__Params(this);
  }
}

export class PartitionRedeemed__Params {
  _event: PartitionRedeemed;

  constructor(event: PartitionRedeemed) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get redeemer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PoolPartitioned extends ethereum.Event {
  get params(): PoolPartitioned__Params {
    return new PoolPartitioned__Params(this);
  }
}

export class PoolPartitioned__Params {
  _event: PoolPartitioned;

  constructor(event: PoolPartitioned) {
    this._event = event;
  }

  get partitioned(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Trade extends ethereum.Event {
  get params(): Trade__Params {
    return new Trade__Params(this);
  }
}

export class Trade__Params {
  _event: Trade;

  constructor(event: Trade) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get origin(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get target(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get originAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get targetAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Shell__liquidityResult {
  value0: BigInt;
  value1: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class Shell__proportionalDepositResult {
  value0: BigInt;
  value1: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class Shell__shellResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class Shell__viewProportionalDepositResult {
  value0: BigInt;
  value1: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class Shell__viewShellResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Shell extends ethereum.SmartContract {
  static bind(address: Address): Shell {
    return new Shell("Shell", address);
  }

  allowance(_owner: Address, _spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    _owner: Address,
    _spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(_spender: Address, _amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(
    _spender: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  assimilator(_derivative: Address): Address {
    let result = super.call("assimilator", "assimilator(address):(address)", [
      ethereum.Value.fromAddress(_derivative)
    ]);

    return result[0].toAddress();
  }

  try_assimilator(_derivative: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "assimilator",
      "assimilator(address):(address)",
      [ethereum.Value.fromAddress(_derivative)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(_account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  chi(): Address {
    let result = super.call("chi", "chi():(address)", []);

    return result[0].toAddress();
  }

  try_chi(): ethereum.CallResult<Address> {
    let result = super.tryCall("chi", "chi():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  derivatives(param0: BigInt): Address {
    let result = super.call("derivatives", "derivatives(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_derivatives(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "derivatives",
      "derivatives(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  frozen(): boolean {
    let result = super.call("frozen", "frozen():(bool)", []);

    return result[0].toBoolean();
  }

  try_frozen(): ethereum.CallResult<boolean> {
    let result = super.tryCall("frozen", "frozen():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidity(): Shell__liquidityResult {
    let result = super.call("liquidity", "liquidity():(uint256,uint256[])", []);

    return new Shell__liquidityResult(
      result[0].toBigInt(),
      result[1].toBigIntArray()
    );
  }

  try_liquidity(): ethereum.CallResult<Shell__liquidityResult> {
    let result = super.tryCall(
      "liquidity",
      "liquidity():(uint256,uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Shell__liquidityResult(value[0].toBigInt(), value[1].toBigIntArray())
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  numeraires(param0: BigInt): Address {
    let result = super.call("numeraires", "numeraires(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_numeraires(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("numeraires", "numeraires(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  originSwap(
    _origin: Address,
    _target: Address,
    _originAmount: BigInt,
    _minTargetAmount: BigInt,
    _deadline: BigInt
  ): BigInt {
    let result = super.call(
      "originSwap",
      "originSwap(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_origin),
        ethereum.Value.fromAddress(_target),
        ethereum.Value.fromUnsignedBigInt(_originAmount),
        ethereum.Value.fromUnsignedBigInt(_minTargetAmount),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );

    return result[0].toBigInt();
  }

  try_originSwap(
    _origin: Address,
    _target: Address,
    _originAmount: BigInt,
    _minTargetAmount: BigInt,
    _deadline: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "originSwap",
      "originSwap(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_origin),
        ethereum.Value.fromAddress(_target),
        ethereum.Value.fromUnsignedBigInt(_originAmount),
        ethereum.Value.fromUnsignedBigInt(_minTargetAmount),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  originSwapDiscountCHI(
    _origin: Address,
    _target: Address,
    _originAmount: BigInt,
    _minTargetAmount: BigInt,
    _deadline: BigInt
  ): BigInt {
    let result = super.call(
      "originSwapDiscountCHI",
      "originSwapDiscountCHI(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_origin),
        ethereum.Value.fromAddress(_target),
        ethereum.Value.fromUnsignedBigInt(_originAmount),
        ethereum.Value.fromUnsignedBigInt(_minTargetAmount),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );

    return result[0].toBigInt();
  }

  try_originSwapDiscountCHI(
    _origin: Address,
    _target: Address,
    _originAmount: BigInt,
    _minTargetAmount: BigInt,
    _deadline: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "originSwapDiscountCHI",
      "originSwapDiscountCHI(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_origin),
        ethereum.Value.fromAddress(_target),
        ethereum.Value.fromUnsignedBigInt(_originAmount),
        ethereum.Value.fromUnsignedBigInt(_minTargetAmount),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  partitionTickets(param0: Address): boolean {
    let result = super.call(
      "partitionTickets",
      "partitionTickets(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_partitionTickets(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "partitionTickets",
      "partitionTickets(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  partitioned(): boolean {
    let result = super.call("partitioned", "partitioned():(bool)", []);

    return result[0].toBoolean();
  }

  try_partitioned(): ethereum.CallResult<boolean> {
    let result = super.tryCall("partitioned", "partitioned():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  partitionedWithdraw(
    _tokens: Array<Address>,
    _amounts: Array<BigInt>
  ): Array<BigInt> {
    let result = super.call(
      "partitionedWithdraw",
      "partitionedWithdraw(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(_tokens),
        ethereum.Value.fromUnsignedBigIntArray(_amounts)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_partitionedWithdraw(
    _tokens: Array<Address>,
    _amounts: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "partitionedWithdraw",
      "partitionedWithdraw(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(_tokens),
        ethereum.Value.fromUnsignedBigIntArray(_amounts)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  proportionalDeposit(
    _deposit: BigInt,
    _deadline: BigInt
  ): Shell__proportionalDepositResult {
    let result = super.call(
      "proportionalDeposit",
      "proportionalDeposit(uint256,uint256):(uint256,uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_deposit),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );

    return new Shell__proportionalDepositResult(
      result[0].toBigInt(),
      result[1].toBigIntArray()
    );
  }

  try_proportionalDeposit(
    _deposit: BigInt,
    _deadline: BigInt
  ): ethereum.CallResult<Shell__proportionalDepositResult> {
    let result = super.tryCall(
      "proportionalDeposit",
      "proportionalDeposit(uint256,uint256):(uint256,uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_deposit),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Shell__proportionalDepositResult(
        value[0].toBigInt(),
        value[1].toBigIntArray()
      )
    );
  }

  proportionalWithdraw(
    _shellsToBurn: BigInt,
    _deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "proportionalWithdraw",
      "proportionalWithdraw(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_shellsToBurn),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_proportionalWithdraw(
    _shellsToBurn: BigInt,
    _deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "proportionalWithdraw",
      "proportionalWithdraw(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_shellsToBurn),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  reserves(param0: BigInt): Address {
    let result = super.call("reserves", "reserves(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_reserves(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("reserves", "reserves(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  selectiveDeposit(
    _derivatives: Array<Address>,
    _amounts: Array<BigInt>,
    _minShells: BigInt,
    _deadline: BigInt
  ): BigInt {
    let result = super.call(
      "selectiveDeposit",
      "selectiveDeposit(address[],uint256[],uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddressArray(_derivatives),
        ethereum.Value.fromUnsignedBigIntArray(_amounts),
        ethereum.Value.fromUnsignedBigInt(_minShells),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );

    return result[0].toBigInt();
  }

  try_selectiveDeposit(
    _derivatives: Array<Address>,
    _amounts: Array<BigInt>,
    _minShells: BigInt,
    _deadline: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "selectiveDeposit",
      "selectiveDeposit(address[],uint256[],uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddressArray(_derivatives),
        ethereum.Value.fromUnsignedBigIntArray(_amounts),
        ethereum.Value.fromUnsignedBigInt(_minShells),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  selectiveWithdraw(
    _derivatives: Array<Address>,
    _amounts: Array<BigInt>,
    _maxShells: BigInt,
    _deadline: BigInt
  ): BigInt {
    let result = super.call(
      "selectiveWithdraw",
      "selectiveWithdraw(address[],uint256[],uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddressArray(_derivatives),
        ethereum.Value.fromUnsignedBigIntArray(_amounts),
        ethereum.Value.fromUnsignedBigInt(_maxShells),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );

    return result[0].toBigInt();
  }

  try_selectiveWithdraw(
    _derivatives: Array<Address>,
    _amounts: Array<BigInt>,
    _maxShells: BigInt,
    _deadline: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "selectiveWithdraw",
      "selectiveWithdraw(address[],uint256[],uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddressArray(_derivatives),
        ethereum.Value.fromUnsignedBigIntArray(_amounts),
        ethereum.Value.fromUnsignedBigInt(_maxShells),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shell(): Shell__shellResult {
    let result = super.call(
      "shell",
      "shell():(int128,int128,int128,int128,int128,uint256)",
      []
    );

    return new Shell__shellResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_shell(): ethereum.CallResult<Shell__shellResult> {
    let result = super.tryCall(
      "shell",
      "shell():(int128,int128,int128,int128,int128,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Shell__shellResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  supportsInterface(_interface: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interface)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(_interface: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interface)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  targetSwap(
    _origin: Address,
    _target: Address,
    _maxOriginAmount: BigInt,
    _targetAmount: BigInt,
    _deadline: BigInt
  ): BigInt {
    let result = super.call(
      "targetSwap",
      "targetSwap(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_origin),
        ethereum.Value.fromAddress(_target),
        ethereum.Value.fromUnsignedBigInt(_maxOriginAmount),
        ethereum.Value.fromUnsignedBigInt(_targetAmount),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );

    return result[0].toBigInt();
  }

  try_targetSwap(
    _origin: Address,
    _target: Address,
    _maxOriginAmount: BigInt,
    _targetAmount: BigInt,
    _deadline: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "targetSwap",
      "targetSwap(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_origin),
        ethereum.Value.fromAddress(_target),
        ethereum.Value.fromUnsignedBigInt(_maxOriginAmount),
        ethereum.Value.fromUnsignedBigInt(_targetAmount),
        ethereum.Value.fromUnsignedBigInt(_deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(_recipient: Address, _amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_recipient),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    _recipient: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_recipient),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(
    _sender: Address,
    _recipient: Address,
    _amount: BigInt
  ): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    _sender: Address,
    _recipient: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  viewOriginSwap(
    _origin: Address,
    _target: Address,
    _originAmount: BigInt
  ): BigInt {
    let result = super.call(
      "viewOriginSwap",
      "viewOriginSwap(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_origin),
        ethereum.Value.fromAddress(_target),
        ethereum.Value.fromUnsignedBigInt(_originAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_viewOriginSwap(
    _origin: Address,
    _target: Address,
    _originAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewOriginSwap",
      "viewOriginSwap(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_origin),
        ethereum.Value.fromAddress(_target),
        ethereum.Value.fromUnsignedBigInt(_originAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewPartitionClaims(_addr: Address): Array<BigInt> {
    let result = super.call(
      "viewPartitionClaims",
      "viewPartitionClaims(address):(uint256[])",
      [ethereum.Value.fromAddress(_addr)]
    );

    return result[0].toBigIntArray();
  }

  try_viewPartitionClaims(_addr: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "viewPartitionClaims",
      "viewPartitionClaims(address):(uint256[])",
      [ethereum.Value.fromAddress(_addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  viewProportionalDeposit(
    _deposit: BigInt
  ): Shell__viewProportionalDepositResult {
    let result = super.call(
      "viewProportionalDeposit",
      "viewProportionalDeposit(uint256):(uint256,uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_deposit)]
    );

    return new Shell__viewProportionalDepositResult(
      result[0].toBigInt(),
      result[1].toBigIntArray()
    );
  }

  try_viewProportionalDeposit(
    _deposit: BigInt
  ): ethereum.CallResult<Shell__viewProportionalDepositResult> {
    let result = super.tryCall(
      "viewProportionalDeposit",
      "viewProportionalDeposit(uint256):(uint256,uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_deposit)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Shell__viewProportionalDepositResult(
        value[0].toBigInt(),
        value[1].toBigIntArray()
      )
    );
  }

  viewProportionalWithdraw(_shellsToBurn: BigInt): Array<BigInt> {
    let result = super.call(
      "viewProportionalWithdraw",
      "viewProportionalWithdraw(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_shellsToBurn)]
    );

    return result[0].toBigIntArray();
  }

  try_viewProportionalWithdraw(
    _shellsToBurn: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "viewProportionalWithdraw",
      "viewProportionalWithdraw(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_shellsToBurn)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  viewSelectiveDeposit(
    _derivatives: Array<Address>,
    _amounts: Array<BigInt>
  ): BigInt {
    let result = super.call(
      "viewSelectiveDeposit",
      "viewSelectiveDeposit(address[],uint256[]):(uint256)",
      [
        ethereum.Value.fromAddressArray(_derivatives),
        ethereum.Value.fromUnsignedBigIntArray(_amounts)
      ]
    );

    return result[0].toBigInt();
  }

  try_viewSelectiveDeposit(
    _derivatives: Array<Address>,
    _amounts: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewSelectiveDeposit",
      "viewSelectiveDeposit(address[],uint256[]):(uint256)",
      [
        ethereum.Value.fromAddressArray(_derivatives),
        ethereum.Value.fromUnsignedBigIntArray(_amounts)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewSelectiveWithdraw(
    _derivatives: Array<Address>,
    _amounts: Array<BigInt>
  ): BigInt {
    let result = super.call(
      "viewSelectiveWithdraw",
      "viewSelectiveWithdraw(address[],uint256[]):(uint256)",
      [
        ethereum.Value.fromAddressArray(_derivatives),
        ethereum.Value.fromUnsignedBigIntArray(_amounts)
      ]
    );

    return result[0].toBigInt();
  }

  try_viewSelectiveWithdraw(
    _derivatives: Array<Address>,
    _amounts: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewSelectiveWithdraw",
      "viewSelectiveWithdraw(address[],uint256[]):(uint256)",
      [
        ethereum.Value.fromAddressArray(_derivatives),
        ethereum.Value.fromUnsignedBigIntArray(_amounts)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewShell(): Shell__viewShellResult {
    let result = super.call(
      "viewShell",
      "viewShell():(uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new Shell__viewShellResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_viewShell(): ethereum.CallResult<Shell__viewShellResult> {
    let result = super.tryCall(
      "viewShell",
      "viewShell():(uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Shell__viewShellResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  viewTargetSwap(
    _origin: Address,
    _target: Address,
    _targetAmount: BigInt
  ): BigInt {
    let result = super.call(
      "viewTargetSwap",
      "viewTargetSwap(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_origin),
        ethereum.Value.fromAddress(_target),
        ethereum.Value.fromUnsignedBigInt(_targetAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_viewTargetSwap(
    _origin: Address,
    _target: Address,
    _targetAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewTargetSwap",
      "viewTargetSwap(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_origin),
        ethereum.Value.fromAddress(_target),
        ethereum.Value.fromUnsignedBigInt(_targetAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _assets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _assetWeights(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _derivativeAssimilators(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get success_(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExcludeDerivativeCall extends ethereum.Call {
  get inputs(): ExcludeDerivativeCall__Inputs {
    return new ExcludeDerivativeCall__Inputs(this);
  }

  get outputs(): ExcludeDerivativeCall__Outputs {
    return new ExcludeDerivativeCall__Outputs(this);
  }
}

export class ExcludeDerivativeCall__Inputs {
  _call: ExcludeDerivativeCall;

  constructor(call: ExcludeDerivativeCall) {
    this._call = call;
  }

  get _derivative(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ExcludeDerivativeCall__Outputs {
  _call: ExcludeDerivativeCall;

  constructor(call: ExcludeDerivativeCall) {
    this._call = call;
  }
}

export class OriginSwapCall extends ethereum.Call {
  get inputs(): OriginSwapCall__Inputs {
    return new OriginSwapCall__Inputs(this);
  }

  get outputs(): OriginSwapCall__Outputs {
    return new OriginSwapCall__Outputs(this);
  }
}

export class OriginSwapCall__Inputs {
  _call: OriginSwapCall;

  constructor(call: OriginSwapCall) {
    this._call = call;
  }

  get _origin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _target(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _originAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minTargetAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class OriginSwapCall__Outputs {
  _call: OriginSwapCall;

  constructor(call: OriginSwapCall) {
    this._call = call;
  }

  get targetAmount_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OriginSwapDiscountCHICall extends ethereum.Call {
  get inputs(): OriginSwapDiscountCHICall__Inputs {
    return new OriginSwapDiscountCHICall__Inputs(this);
  }

  get outputs(): OriginSwapDiscountCHICall__Outputs {
    return new OriginSwapDiscountCHICall__Outputs(this);
  }
}

export class OriginSwapDiscountCHICall__Inputs {
  _call: OriginSwapDiscountCHICall;

  constructor(call: OriginSwapDiscountCHICall) {
    this._call = call;
  }

  get _origin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _target(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _originAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minTargetAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class OriginSwapDiscountCHICall__Outputs {
  _call: OriginSwapDiscountCHICall;

  constructor(call: OriginSwapDiscountCHICall) {
    this._call = call;
  }

  get targetAmount_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PartitionCall extends ethereum.Call {
  get inputs(): PartitionCall__Inputs {
    return new PartitionCall__Inputs(this);
  }

  get outputs(): PartitionCall__Outputs {
    return new PartitionCall__Outputs(this);
  }
}

export class PartitionCall__Inputs {
  _call: PartitionCall;

  constructor(call: PartitionCall) {
    this._call = call;
  }
}

export class PartitionCall__Outputs {
  _call: PartitionCall;

  constructor(call: PartitionCall) {
    this._call = call;
  }
}

export class PartitionedWithdrawCall extends ethereum.Call {
  get inputs(): PartitionedWithdrawCall__Inputs {
    return new PartitionedWithdrawCall__Inputs(this);
  }

  get outputs(): PartitionedWithdrawCall__Outputs {
    return new PartitionedWithdrawCall__Outputs(this);
  }
}

export class PartitionedWithdrawCall__Inputs {
  _call: PartitionedWithdrawCall;

  constructor(call: PartitionedWithdrawCall) {
    this._call = call;
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class PartitionedWithdrawCall__Outputs {
  _call: PartitionedWithdrawCall;

  constructor(call: PartitionedWithdrawCall) {
    this._call = call;
  }

  get withdrawals_(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class ProportionalDepositCall extends ethereum.Call {
  get inputs(): ProportionalDepositCall__Inputs {
    return new ProportionalDepositCall__Inputs(this);
  }

  get outputs(): ProportionalDepositCall__Outputs {
    return new ProportionalDepositCall__Outputs(this);
  }
}

export class ProportionalDepositCall__Inputs {
  _call: ProportionalDepositCall;

  constructor(call: ProportionalDepositCall) {
    this._call = call;
  }

  get _deposit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ProportionalDepositCall__Outputs {
  _call: ProportionalDepositCall;

  constructor(call: ProportionalDepositCall) {
    this._call = call;
  }

  get shellsMinted_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get deposits_(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class ProportionalWithdrawCall extends ethereum.Call {
  get inputs(): ProportionalWithdrawCall__Inputs {
    return new ProportionalWithdrawCall__Inputs(this);
  }

  get outputs(): ProportionalWithdrawCall__Outputs {
    return new ProportionalWithdrawCall__Outputs(this);
  }
}

export class ProportionalWithdrawCall__Inputs {
  _call: ProportionalWithdrawCall;

  constructor(call: ProportionalWithdrawCall) {
    this._call = call;
  }

  get _shellsToBurn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ProportionalWithdrawCall__Outputs {
  _call: ProportionalWithdrawCall;

  constructor(call: ProportionalWithdrawCall) {
    this._call = call;
  }

  get withdrawals_(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SelectiveDepositCall extends ethereum.Call {
  get inputs(): SelectiveDepositCall__Inputs {
    return new SelectiveDepositCall__Inputs(this);
  }

  get outputs(): SelectiveDepositCall__Outputs {
    return new SelectiveDepositCall__Outputs(this);
  }
}

export class SelectiveDepositCall__Inputs {
  _call: SelectiveDepositCall;

  constructor(call: SelectiveDepositCall) {
    this._call = call;
  }

  get _derivatives(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _minShells(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SelectiveDepositCall__Outputs {
  _call: SelectiveDepositCall;

  constructor(call: SelectiveDepositCall) {
    this._call = call;
  }

  get shellsMinted_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SelectiveWithdrawCall extends ethereum.Call {
  get inputs(): SelectiveWithdrawCall__Inputs {
    return new SelectiveWithdrawCall__Inputs(this);
  }

  get outputs(): SelectiveWithdrawCall__Outputs {
    return new SelectiveWithdrawCall__Outputs(this);
  }
}

export class SelectiveWithdrawCall__Inputs {
  _call: SelectiveWithdrawCall;

  constructor(call: SelectiveWithdrawCall) {
    this._call = call;
  }

  get _derivatives(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _maxShells(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SelectiveWithdrawCall__Outputs {
  _call: SelectiveWithdrawCall;

  constructor(call: SelectiveWithdrawCall) {
    this._call = call;
  }

  get shellsBurned_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetFrozenCall extends ethereum.Call {
  get inputs(): SetFrozenCall__Inputs {
    return new SetFrozenCall__Inputs(this);
  }

  get outputs(): SetFrozenCall__Outputs {
    return new SetFrozenCall__Outputs(this);
  }
}

export class SetFrozenCall__Inputs {
  _call: SetFrozenCall;

  constructor(call: SetFrozenCall) {
    this._call = call;
  }

  get _toFreezeOrNotToFreeze(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetFrozenCall__Outputs {
  _call: SetFrozenCall;

  constructor(call: SetFrozenCall) {
    this._call = call;
  }
}

export class SetParamsCall extends ethereum.Call {
  get inputs(): SetParamsCall__Inputs {
    return new SetParamsCall__Inputs(this);
  }

  get outputs(): SetParamsCall__Outputs {
    return new SetParamsCall__Outputs(this);
  }
}

export class SetParamsCall__Inputs {
  _call: SetParamsCall;

  constructor(call: SetParamsCall) {
    this._call = call;
  }

  get _alpha(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _beta(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _feeAtHalt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _epsilon(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _lambda(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SetParamsCall__Outputs {
  _call: SetParamsCall;

  constructor(call: SetParamsCall) {
    this._call = call;
  }
}

export class TargetSwapCall extends ethereum.Call {
  get inputs(): TargetSwapCall__Inputs {
    return new TargetSwapCall__Inputs(this);
  }

  get outputs(): TargetSwapCall__Outputs {
    return new TargetSwapCall__Outputs(this);
  }
}

export class TargetSwapCall__Inputs {
  _call: TargetSwapCall;

  constructor(call: TargetSwapCall) {
    this._call = call;
  }

  get _origin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _target(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _maxOriginAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _targetAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class TargetSwapCall__Outputs {
  _call: TargetSwapCall;

  constructor(call: TargetSwapCall) {
    this._call = call;
  }

  get originAmount_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get success_(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get success_(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
